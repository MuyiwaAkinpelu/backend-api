generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  phone      String?
  firstName  String?
  lastName   String?
  password   String
  avatar     String?
  roles      Roles[]  @default([GUEST])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  isVerified Boolean? @default(false)
  isActive   Boolean? @default(false)

  filesUploaded File[] @relation("UploadedDocuments") // files you uploaded

  fileSharedIDs String[] @db.ObjectId // files shared with you
  filesShared   File[]   @relation(fields: [fileSharedIDs], references: [id])

  documentsApproved    File[] @relation("ApprovedDocuments")
  documentsDisapproved File[] @relation("DisapprovedDocuments")

  createdProjects Project[] @relation("ProjectCreatedBy")
  updatedProjects Project[] @relation("ProjectUpdatedBy")

  projectMemberProjectIDs  String[]  @db.ObjectId
  projectMemberProjects    Project[] @relation(fields: [projectMemberProjectIDs], references: [id], name: "ProjectMemberProjects")
  projectManagerProjectIDs String[]  @db.ObjectId
  projectManagerProjects   Project[] @relation(fields: [projectMemberProjectIDs], references: [id], name: "ProjectManagerProjects")

  tokens Token[]
}

model TokenWhiteList {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  accessToken    String?
  refreshToken   String?
  refreshTokenId String?
  expiredAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

enum Roles {
  SYSTEM_ADMIN
  PROGRAM_OPERATION_STAFF
  NEW_STAFF
  GUEST
  MANAGEMENT_STAFF
}

enum DocumentApprovalStatus {
  NOT_REQUESTED
  PENDING
  APPROVED
  DISAPPROVED
}

enum DocumentVisibility {
  PRIVATE
  PUBLIC
}

model File {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  filename String?
  path     String

  uploader   User   @relation(fields: [uploaderId], references: [id], "UploadedDocuments")
  uploaderId String @db.ObjectId

  approvalStatus    DocumentApprovalStatus @default(NOT_REQUESTED)
  visibility        DocumentVisibility     @default(PRIVATE)
  size              Int // File size in bytes
  fileType          String? // Type of file (e.g., image, document)
  uploadDate        DateTime               @default(now()) // Date when the file was uploaded
  description       String?
  tags              String[] // Tags or keywords associated with the file
  originalFilename  String // Original filename of the uploaded file
  contentType       String // MIME type of the file
  disapprovalReason String? // Reason for disapproval, if applicable

  approvedById    String? @db.ObjectId
  approvedBy      User?   @relation("ApprovedDocuments", fields: [approvedById], references: [id])
  disapprovedById String? @db.ObjectId
  disapprovedBy   User?   @relation("DisapprovedDocuments", fields: [disapprovedById], references: [id])

  sharedWithIDs String[] @db.ObjectId
  sharedWith    User[]   @relation(fields: [sharedWithIDs], references: [id])
}

model Token {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  owner     User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  code      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  expiresAt DateTime     @db.Timestamp()
  useCase   TokenUseCase
  type      TokenType    @default(value: OTP)
}

model Project {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    ProjectCategory @default(value: SCIDAR)
  description String?
  tags        String[] // Tags or keywords associated with the projects

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUserId String? @db.ObjectId
  createdBy       User?   @relation(fields: [createdByUserId], references: [id], name: "ProjectCreatedBy")
  updatedByUserId String? @db.ObjectId
  updatedBy       User?   @relation(fields: [updatedByUserId], references: [id], name: "ProjectUpdatedBy")

  projectMembersIDs  String[] @db.ObjectId
  projectMembers     User[]   @relation(fields: [projectMembersIDs], references: [id], name: "ProjectMemberProjects")
  projectManagersIDs String[] @db.ObjectId
  projectManagers    User[]   @relation(fields: [projectManagersIDs], references: [id], name: "ProjectManagerProjects")
}

enum TokenUseCase {
  PWD_RESET // Reset Password
  LOGIN // Login
  D2FA // Disable 2FA
  PHV // Phone Verification
}

enum TokenType {
  HEX
  OTP
}

enum ProjectCategory {
  SCIDAR
  SOLINA_HEALTH
}
